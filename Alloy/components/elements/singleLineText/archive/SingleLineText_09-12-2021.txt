<template>
	<div class="input">
		<v-text-field
			v-model="data.text"
		/>
		<has-changed-indicator
			:old-data="dataFromDataBase"
			:new-data="data"
		/>
	</div>
</template>

<script>
import { mapGetters } from 'vuex'

import { deepCopy } from '~/assets/classes/objectClasses'

export default {
	inheritAttrs: false,
	props: {
		elementId: {
			type: String,
			required: true
		},
		name: {
			type: String,
			required: true
		},
		label: {
			type: String,
			required: true
		},
		hasError: {
			type: Boolean,
			default: false
		}
	},

	data () {
		return {
			dataFromDataBase: {
				text: ''
			},
			data: {
				text: ''
			}
		}
	},

	computed: {
		...mapGetters({
			fileData: 'file/getFileData'
		}),

		// computed property to return the fileData
		watchFileData () {
			return this.fileData
		},

		// computed property to return the entered text
		watchText () {
			return this.data
		}
	},

	watch: {
		// watcher to watch the fileData
		watchFileData: {
			deep: true,
			handler () {
				this.findData()
				const payload = {
					elementId: this.elementId,
					hasChanged: false
				}
				this.$store.commit('infoBox/addToHasChangedArray', payload)
			}
		},

		// watcher to watch the entered text
		watchText: {
			deep: true,
			handler () {
				// constructing the payload
				const payload = {
					elementId: this.elementId,
					data: {
						text: this.data.text
					}
				}
				// calling the store mutation to comit the entered text to the store
				this.$store.commit('file/setEnteredData', payload)
				console.log(this.data)
				const copy = deepCopy(this.data)
				copy.text = 'sÃ¶'
				console.log(this.data, copy)
				if (JSON.stringify(this.data) !== JSON.stringify(this.dataFromDataBase)) {
					// if changes have occured:

					// preparing the payload, consisting of the elementId and hasChanged-property = true
					const payload = {
						elementId: this.elementId,
						hasChanged: true
					}
					// commiting the payload to the store
					this.$store.commit('infoBox/setHasChangedPropertyOfElement', payload)
				} else {
					// if no changes have occured:

					// preparing the payload, consisting of the elementId and hasChanged-property = false
					const payload = {
						elementId: this.elementId,
						hasChanged: false
					}
					// commiting the payload to the store
					this.$store.commit('infoBox/setHasChangedPropertyOfElement', payload)
				}
			}
		}
	},

	mounted () {
		this.findData()
		const payload = {
			elementId: this.elementId,
			hasChanged: false
		}
		this.$store.commit('infoBox/addToHasChangedArray', payload)
	},

	methods: {
		findData () {
			// finding the data belonging to this element
			const elementData = this.fileData.find(item => item.elementId === this.elementId)
			this.res = elementData
			// if matching data is found
			if (elementData) {
				// assinging the text in file data to this.text
				this.data = JSON.parse(JSON.stringify(elementData.data))
				this.dataFromDataBase = elementData.data
			} else {
				// if no data is found this.text is empty
				this.data.text = ''
				this.dataFromDataBase.text = ''
			}
		}
	}
}
</script>

<style scoped>
.input {
  display: flex;
}
</style>
