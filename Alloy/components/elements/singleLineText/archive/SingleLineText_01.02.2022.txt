# name: Single Line Text
# author: Sebastian ULLY
# type: alloy element
# version: 1.0
# date: 15.12.2021
# external dependents: /
# internal dependents: Has Changed Indicator

<template>
	<!-- container to hold all thats neccessary for the input-element -->
	<div class="input">
		<single-line-input
			:data-from-database="dataFromDataBase.text"
			:data-in-component="dataInComponent.text"
		/>
		<!-- input-field -->
		<!-- <input
			v-model="$v.dataInComponent.text.$model"
			type="text"
			placeholder=" "
			class="input__field"
		> -->
		<!-- label to the input-field -->
		<!-- <span class="input__label">
			{{ label }}
		</span> -->
		<!-- error-message to the input -->
		<!-- <span class="input__error">
			required
		</span> -->
		<!-- <div class="input__error">
			<has-changed-indicator
				:old-data="dataFromDataBase"
				:new-data="dataInComponent"
			/>
		</div> -->
	</div>
</template>

<script>
// mapGetters is used to get the states in the VUEX-Store
import { mapGetters } from 'vuex'
// import { required } from 'vuelidate/lib/validators'

// importing the necessary alloy classes from the classes-file
import { deepCopy } from '~/assets/classes/objectClasses'
import { GetElementData } from '~/assets/classes/alloyClasses'

export default {
	inheritAttrs: false,
	props: {
		elementId: {
			type: String,
			required: true
		},
		name: {
			type: String,
			required: true
		},
		label: {
			type: String,
			required: true
		},
		hasError: {
			type: Boolean,
			default: false
		}
	},

	data () {
		return {
			dataFromDataBase: {
				text: ''
			},
			dataInComponent: {
				text: ''
			}
		}
	},

	validations: {
		dataInComponent: {
			text: {
				required: true
			}
		}
	},

	computed: {
		...mapGetters({
			fileData: 'file/getFileData'
		}),

		// computed property to return the fileData
		watchFileData () {
			return this.fileData
		},

		// computed property to return the entered text
		watchText () {
			return this.dataInComponent
		}
	},

	watch: {
		// watcher to watch the fileData
		watchFileData: {
			deep: true,
			handler () {
				this.findData()
				const payload = {
					elementId: this.elementId,
					hasChanged: false
				}
				this.$store.commit('infoBox/addToHasChangedArray', payload)
			}
		},

		// watcher to watch the entered text
		watchText: {
			deep: true,
			handler () {
				if (this.dataInComponent) {
					// constructing the payload
					const payload = {
						elementId: this.elementId,
						data: {
							text: this.dataInComponent.text
						}
					}
					// calling the store mutation to comit the entered text to the store
					this.$store.commit('file/setEnteredData', payload)
					// console.log(this.data)
					const copy = deepCopy(this.dataInComponent)
					copy.text = 's√∂'
					// console.log(this.data, copy)
					if (JSON.stringify(this.dataInComponent) !== JSON.stringify(this.dataFromDataBase)) {
						// if changes have occured:

						// preparing the payload, consisting of the elementId and hasChanged-property = true
						const payload = {
							elementId: this.elementId,
							hasChanged: true
						}
						// commiting the payload to the store
						this.$store.commit('infoBox/setHasChangedPropertyOfElement', payload)
					} else {
						// if no changes have occured:

						// preparing the payload, consisting of the elementId and hasChanged-property = false
						const payload = {
							elementId: this.elementId,
							hasChanged: false
						}
						// commiting the payload to the store
						this.$store.commit('infoBox/setHasChangedPropertyOfElement', payload)
					}
				}
			}
		}
	},

	mounted () {
		this.findData()
		const payload = {
			elementId: this.elementId,
			hasChanged: false
		}
		this.$store.commit('infoBox/addToHasChangedArray', payload)
	},

	methods: {
		findData () {
			const data = new GetElementData(this.fileData, this.elementId)
			this.dataInComponent = data.data
			this.dataFromDataBase = data.dataFromDataBase
		}
	}
}
</script>

<style scoped lang="scss">
@import '../../../assets/scss/componets/SingleLineText.scss';
</style>
